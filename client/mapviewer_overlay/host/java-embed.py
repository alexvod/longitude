#!/usr/bin/python
#
# Generates Java code to embed binary objects into a program

import sys

BLOCK_SIZE = 9000
TEMPLATE = """package %(package)s;

// DO NOT EDIT!
// This file was automatically generated by java-embed.py from %(filename)s

public final class %(classname)s {
  public static final byte[] DATA = buildData();

%(blocks)s

  private static byte[] buildData() {
    byte[] result = new byte[%(size)d];
    int pos = 0;
    int block_len = 0;
%(block_append)s
    return result;
  }
}
"""
BLOCK_TEMPLATE = """
  private final static class Block%(num_block)d {
    private final static byte[] DATA = {
      %(data)s
    };
  }
"""
BLOCK_APPEND_TEMPLATE = """    block_len = Block%(num_block)d.DATA.length;
    System.arraycopy(Block%(num_block)d.DATA, 0, result, pos, block_len);
    pos += block_len;"""

def EncodeDataBlock(contents):
    data = []
    for idx, b in enumerate(contents):
        signed_b = ord(b)
        if signed_b >= 128:
            signed_b -= 256
        formatted = '%d' % signed_b
        formatted = ((4 - len(formatted)) * ' ') + formatted
        data.append(formatted)
        if idx != len(contents) - 1:
            data.append(', ')
        if (idx + 1) % 12 == 0:
            data.append('\n      ')
    return ''.join(data)

def GenJava(classname, filename):
    name_components = classname.split('.')
    package = '.'.join(name_components[:-1])
    classname = name_components[-1]
    contents = open(filename, 'r').read()
    size = len(contents)

    num_blocks = 0
    blocks = []
    block_append = []
    while len(contents) > 0:
        block = contents[0:BLOCK_SIZE]
        encoded = EncodeDataBlock(block)
        blocks.append(BLOCK_TEMPLATE % {'num_block': num_blocks, 'data': encoded})
        block_append.append(BLOCK_APPEND_TEMPLATE % {'num_block': num_blocks})
        contents = contents[len(block):]
        num_blocks += 1
        
    print TEMPLATE % {'classname': classname,
                      'package': package,
                      'filename': filename,
                      'size': size,
                      'blocks': '\n'.join(blocks),
                      'block_append': '\n'.join(block_append),
                      'num_blocks': num_blocks,
                      }


GenJava(sys.argv[1], sys.argv[2])
